"use client";

import { useAuth } from "@/hooks/useAuth";
import { useSidebar } from "@/hooks/useSidebar";
import { usePathname } from "next/navigation";
import { useMemo, useState, useEffect, useRef } from "react";
import { permissionService } from "@/services/permissionService";
import { toast } from "sonner";

// Global cache for permissions to avoid multiple API calls
const permissionCache = new Map<
  string,
  { permissions: string[]; timestamp: number }
>();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

/**
 * Hook ƒë·ªÉ ki·ªÉm tra quy·ªÅn trong component
 * @returns C√°c h√†m v√† state li√™n quan ƒë·∫øn quy·ªÅn
 */
export function usePermissions() {
  const { user } = useAuth();
  const { flatMenuItems } = useSidebar();
  const pathname = usePathname();
  const [userPermissions, setUserPermissions] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const fetchingRef = useRef<boolean>(false); // Prevent multiple concurrent fetches
  const lastUserRef = useRef<{ id?: string; role?: string }>({});

  // Th√¥ng tin trang hi·ªán t·∫°i
  const currentPage = useMemo(() => {
    return flatMenuItems.find((item) => item.path === pathname) || null;
  }, [flatMenuItems, pathname]);

  // Ki·ªÉm tra c√≥ ph·∫£i admin kh√¥ng
  const isAdmin = useMemo(() => user?.role === "admin", [user?.role]);

  // L·∫•y danh s√°ch quy·ªÅn c·ªßa ng∆∞·ªùi d√πng t·ª´ API v·ªõi caching
  useEffect(() => {
    // Ki·ªÉm tra xem user c√≥ thay ƒë·ªïi th·ª±c s·ª± kh√¥ng
    const currentUserId = user?.id;
    const currentUserRole = user?.role;

    if (
      lastUserRef.current.id === currentUserId &&
      lastUserRef.current.role === currentUserRole
    ) {
      // User kh√¥ng thay ƒë·ªïi, kh√¥ng c·∫ßn fetch l·∫°i
      return;
    }

    // C·∫≠p nh·∫≠t reference
    lastUserRef.current = { id: currentUserId, role: currentUserRole };

    console.log("üîç usePermissions useEffect:", {
      userId: currentUserId,
      userRole: currentUserRole,
    });

    const fetchUserPermissions = async () => {
      // N·∫øu ch∆∞a c√≥ user (ch∆∞a login), set loading false v√† empty permissions
      if (!user) {
        console.log("üë§ No user, setting empty permissions and loading false");
        setUserPermissions([]);
        setIsLoading(false);
        return;
      }

      // Admin c√≥ t·∫•t c·∫£ quy·ªÅn, kh√¥ng c·∫ßn fetch
      if (isAdmin) {
        console.log("üîë Admin user, setting loading false");
        setUserPermissions([]);
        setIsLoading(false);
        return;
      }

      // Prevent multiple concurrent fetches
      if (fetchingRef.current) {
        return;
      }

      const userId = user.id;
      const cacheKey = `permissions_${userId}`;
      const now = Date.now();

      // Check cache first
      const cachedData = permissionCache.get(cacheKey);
      if (cachedData && now - cachedData.timestamp < CACHE_DURATION) {
        setUserPermissions(cachedData.permissions);
        setIsLoading(false);
        return;
      }

      try {
        fetchingRef.current = true;
        setIsLoading(true);

        const response = await permissionService.getUserPermissions(userId);

        if (response.success && response.data.permissions) {
          const permissions = response.data.permissions;
          setUserPermissions(permissions);
          // Update cache
          permissionCache.set(cacheKey, { permissions, timestamp: now });
        } else {
          console.warn("Kh√¥ng th·ªÉ l·∫•y quy·ªÅn ng∆∞·ªùi d√πng:", response.message);
          setUserPermissions([]);
        }
      } catch {
        toast.error("L·ªói khi l·∫•y danh s√°ch quy·ªÅn");
        setUserPermissions([]);
      } finally {
        console.log("üìã usePermissions finally: setting loading false");
        setIsLoading(false);
        fetchingRef.current = false;
      }
    };

    fetchUserPermissions();
  }, [user, isAdmin]); // Include full dependencies

  // Ki·ªÉm tra quy·ªÅn truy c·∫≠p trang
  const canAccessPage = useMemo(() => {
    if (!user || !currentPage) return false;

    // Admin lu√¥n c√≥ quy·ªÅn
    if (isAdmin) return true;

    // Ki·ªÉm tra vai tr√≤ ng∆∞·ªùi d√πng - m√¥ h√¨nh c≈©
    const hasRoleAccess = currentPage.allowedRoles.includes(
      user.role as "admin" | "employee"
    );

    // Ki·ªÉm tra theo m√¥ h√¨nh ph√¢n quy·ªÅn m·ªõi - N·∫øu trang y√™u c·∫ßu quy·ªÅn view_X
    if (currentPage.metadata && "requiredPermission" in currentPage.metadata) {
      const requiredPerm = currentPage.metadata.requiredPermission as string;
      return userPermissions.includes(requiredPerm);
    }

    return hasRoleAccess;
  }, [user, currentPage, isAdmin, userPermissions]);

  /**
   * Ki·ªÉm tra quy·ªÅn th·ª±c hi·ªán h√†nh ƒë·ªông (m√¥ h√¨nh m·ªõi)
   * @param action T√™n h√†nh ƒë·ªông c·∫ßn ki·ªÉm tra quy·ªÅn
   * @returns True n·∫øu c√≥ quy·ªÅn
   */
  const can = useMemo(() => {
    return (action: string): boolean => {
      // Admin lu√¥n c√≥ quy·ªÅn
      if (isAdmin) return true;

      // Kh√¥ng c√≥ user
      if (!user) return false;

      // Ki·ªÉm tra theo m√¥ h√¨nh ph√¢n quy·ªÅn m·ªõi
      return userPermissions.includes(action);
    };
  }, [isAdmin, user, userPermissions]);

  /**
   * Ki·ªÉm tra c√°c quy·ªÅn truy c·∫≠p
   * @param actions Danh s√°ch c√°c h√†nh ƒë·ªông c·∫ßn ki·ªÉm tra
   * @returns True n·∫øu c√≥ t·∫•t c·∫£ quy·ªÅn
   */
  const canAll = useMemo(() => {
    return (actions: string[]): boolean => {
      return actions.every((action) => can(action));
    };
  }, [can]);

  /**
   * Ki·ªÉm tra √≠t nh·∫•t m·ªôt trong c√°c quy·ªÅn
   * @param actions Danh s√°ch c√°c h√†nh ƒë·ªông c·∫ßn ki·ªÉm tra
   * @returns True n·∫øu c√≥ √≠t nh·∫•t m·ªôt quy·ªÅn
   */
  const canAny = useMemo(() => {
    return (actions: string[]): boolean => {
      return actions.some((action) => can(action));
    };
  }, [can]);

  return {
    isAdmin,
    canAccessPage,
    can,
    canAll,
    canAny,
    userPermissions,
    isLoading,
    currentPage,
  };
}
